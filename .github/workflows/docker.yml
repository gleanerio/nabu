name: Dockerize  Nabu
# need to look at this to do it right
# https://namiops.medium.com/golang-multi-arch-docker-image-with-github-action-b59a62c8d2bd
on:
  push:
    branches:
      - master
      - dev
      - dev_docker
#    tags:
#      - v3.*
  release:
    types: [published]

# https://github.com/marketplace/actions/publish-docker
# https://github.com/docker/build-push-action
env:
  REGISTRY_IMAGE: nsfearthcube/nabu

jobs:
  build:
    name: Docker nabu
    runs-on: ubuntu-latest

    strategy:
      matrix:
        include:
          - goarch: amd64
            goos: "linux"
            platform: linux/amd64
          - goarch: arm64
            goos: "linux"
            platform: linux/arm64

          # above is explict build lists, otherwise we get amd64 on linux/arm as an option

        # build and publish in parallel: linux/amd64
        #goos: [linux, windows, darwin]
        #goarch: [amd64,arm64]
#        goos: [linux]
#        goarch: [amd64, arm64]
#        platform: [linux/amd64,linux/arm64]
#        exclude:
#          - goarch: "386"
#            goos: darwin
    steps:
      - name: Install Go
        uses: actions/setup-go@v4
      - name: checkout code
        uses: actions/checkout@v2
      - name: donwload schema
        run: curl https://schema.org/version/latest/schemaorg-current-https.jsonld --output assets/schemaorg-current-https.jsonld
      - name: donwload schema
        run: curl https://schema.org/version/latest/schemaorg-current-http.jsonld --output assets/schemaorg-current-http.jsonld
      - name: Set variables
        run: |
          VER=$(cat VERSION)
          echo "VERSION=$VER" >> $GITHUB_ENV
      #     - name: Run tests
      #      run: go test -v -p=1 -timeout=0 ./...
      - id: binary
        name: build
        run: |
          go build -o nabu -ldflags "-s -w -X main.VERSION=${{ env.VERSION }} -X github.com/gleanerio/nabu/pkg.VERSION=${{ env.VERSION }}"
        working-directory: ./cmd/nabu
        env:
          GOOS: ${{matrix.goss}}
          GOARCH: ${{matrix.goarch}}
          CGO_ENABLED: 0
      #  deploy:
      #    needs: build
      #    name: Dockerize Gleaner
      #    runs-on: ubuntu-latest
      #    steps:
      #      - name: Checkout Repo
      #        uses: actions/checkout@v2
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2
        with:
          platforms: ${{matrix.goarch}}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
          flavor: |
            latest=true
          tags: |
            type=ref,event=tag
            type=ref,event=branch
            type=semver,pattern={{version}}

      - name: Build and push by digest
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          # push: true
          platforms: ${{ matrix.platform }}
          #platforms: linux/amd64,linux/arm64
         # tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          file: ./build/Dockerfile
          context: .
          outputs: type=image,name=${{ env.REGISTRY_IMAGE }},push-by-digest=true,name-canonical=true,push=true
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Upload digest
        uses: actions/upload-artifact@v3
        with:
          name: digests
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
  merge:
    runs-on: ubuntu-latest
    needs:
      - build
    steps:

      - name: Download digests
        uses: actions/download-artifact@v3
        with:
          name: digests
          path: /tmp/digests
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY_IMAGE }}
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.REGISTRY_IMAGE }}@sha256:%s ' *)
      -
        name: Inspect image
        run: |
          docker buildx imagetools inspect ${{ env.REGISTRY_IMAGE }}:${{ steps.meta.outputs.version }}